@page
@model knapsack_app.Pages.Dashboard.DashBoardModel
@{
    ViewData["Title"] = "E-commerce Dashboard Template";
    Layout = "~/Pages/Shared/_Admin_Layout.cshtml"; 
}

<div class="mb-6">
    <h1 class="text-xl font-semibold text-gray-800">Thống kê tổng quát</h1>
    <p class="text-sm text-gray-500">Dashboard / <span class="text-gray-700">Thống kê tỉ lệ tăng trưởng mức dộ chơi</span></p>
</div>

<div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
    
    <div class="bg-white p-5 rounded-lg shadow-lg border border-gray-100">
        <h3 class="text-sm font-medium text-gray-500 mb-2">Tổng lượt chơi màn Dễ</h3>
        <div class="flex items-end justify-between">
            <p class="text-3xl font-bold text-gray-900">@Model.DailyStats.Where(s => s.Difficulty == "easy").Sum(s => s.TakenCount)</p>
            <span class="text-sm text-green-500 font-semibold flex items-center">
                @Model.EasyPercentage.ToString("0.00")%
            </span>
        </div>
        <div class="h-16 mt-3 relative">
            <canvas id="totalRevenueChart"></canvas> 
        </div>
    </div>

    <div class="bg-white p-5 rounded-lg shadow-lg border border-gray-100">
        <h3 class="text-sm font-medium text-gray-500 mb-2">Tổng lượt chơi màn Trung Bình</h3>
        <div class="flex items-end justify-between">
            <p class="text-3xl font-bold text-gray-900">@Model.DailyStats.Where(s => s.Difficulty == "medium").Sum(s => s.TakenCount)</p>
            <span class="text-sm text-green-500 font-semibold flex items-center">
                @Model.MediumPercentage.ToString("0.00")%
            </span>
        </div>
        <div class="h-16 mt-3 relative">
            <canvas id="affiliateRevenueChart"></canvas> 
        </div>
    </div>

    <div class="bg-white p-5 rounded-lg shadow-lg h-full border border-gray-100">
        <h3 class="text-sm font-medium text-gray-500 mb-2">Tổng lượt chơi màn Khó</h3>
        <div class="flex items-end justify-between">
            <p class="text-3xl font-bold text-gray-900">@Model.DailyStats.Where(s => s.Difficulty == "hard").Sum(s => s.TakenCount)</p>
            <span class="text-sm text-green-500 font-semibold flex items-center">
                @Model.HardPercentage.ToString("0.00")%
            </span>
        </div>
        <div class="h-16 mt-3 relative">
            <canvas id="refundsChart"></canvas> 
        </div>
    </div>
    <div class="bg-white p-6 rounded-lg shadow-lg border border-gray-100">
        <h2 class="text-lg font-semibold text-gray-800 mb-4">Tỉ lệ đề bài mỗi mức độ</h2>
        <div class="h-48 relative">
            <canvas id="productCategoryChart"></canvas>
        </div>
    </div>
</div>

<div class="grid grid-cols-1 lg:grid-cols-3 gap-6">
    
    <div class="lg:col-span-2 bg-white p-6 rounded-lg shadow-lg border border-gray-100">
        <h2 class="text-lg font-semibold text-gray-800 mb-4">Top 10 người chơi điểm tích luỹ cao nhất</h2>
        
        <div class="overflow-x-auto">
            <table class="min-w-full divide-y divide-gray-200">
                <thead class="bg-gray-50">
                    <tr>
                        <th class="px-3 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">#</th>
                        <th class="px-3 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Tài khoản</th>
                        <th class="px-3 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">ID Người dùng</th>
                        <th class="px-3 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Tổng Điểm</th>
                        <th class="px-3 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Trạng thái</th>
                    </tr>
                </thead>
                <tbody class="bg-white divide-y divide-gray-200">
                    @if (Model.TopUsers != null && Model.TopUsers.Any())
                    {
                        @for (int i = 0; i < Model.TopUsers.Count; i++)
                        {
                            var user = Model.TopUsers[i];
                            <tr>
                                <td class="px-3 py-4 whitespace-nowrap text-sm text-gray-500">@(i + 1)</td>
                                <td class="px-3 py-4 whitespace-nowrap text-sm text-gray-900 font-semibold">@user.Account</td>
                                <td class="px-3 py-4 whitespace-nowrap text-sm text-gray-500">@user.UserId</td>
                                <td class="px-3 py-4 whitespace-nowrap text-sm text-indigo-600 font-bold">@user.AccumulatedScore.ToString("N0")</td>
                                <td class="px-3 py-4 whitespace-nowrap">
                                    <span class="inline-flex items-center px-3 py-1 rounded-full text-xs font-semibold bg-green-100 text-green-800">
                                        Active
                                    </span>
                                </td>
                            </tr>
                        }
                    }
                    else
                    {
                        <tr>
                            <td colspan="5" class="px-3 py-4 text-center text-sm text-gray-500">
                                Chưa có dữ liệu xếp hạng điểm tích lũy.
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
    
    <div class="lg:col-span-1 space-y-6">
        
        <div class="bg-white p-6 rounded-lg shadow-lg border border-gray-100">
            <h2 class="text-lg font-semibold text-gray-800 mb-4">Biểu đồ tỉ lệ chế độ chơi/ ngày</h2>
            <div class="h-64 relative">
                <canvas id="customerAcquisitionChart"></canvas> 
            </div>
        </div>
    </div>
</div>


@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.1/dist/chart.umd.min.js"></script>
    
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            Chart.defaults.maintainAspectRatio = false;
            Chart.defaults.responsive = true;

            const dataLabels = @Html.Raw(Model.ChartLabels);
            const easyData = @Html.Raw(Model.EasyChartData);
            const mediumData = @Html.Raw(Model.MediumChartData);
            const hardData = @Html.Raw(Model.HardChartData);

            const challengeLabels = @Html.Raw(Model.ChallengeCountLabels);
            const challengeData = @Html.Raw(Model.ChallengeCountData);

            const ratioDates = @Html.Raw(Model.DailyRatioDates);
            const soloRatioData = @Html.Raw(Model.SoloRatioData);
            const duoRatioData = @Html.Raw(Model.DuoRatioData);
            const trioRatioData = @Html.Raw(Model.TrioRatioData);
            const quarRatioData = @Html.Raw(Model.QuarRatioData);

            function createMiniLineChart(id, data, labels, color) {
                const ctx = document.getElementById(id);
                if (!ctx) return;
                
                new Chart(ctx, {
                    type: 'line',
                    data: {
                        labels: labels,
                        datasets: [{
                            data: data, 
                            borderColor: color,
                            backgroundColor: 'rgba(0, 0, 0, 0)', 
                            borderWidth: 2,
                            tension: 0.4, 
                            pointRadius: 0, 
                            fill: true, 
                            backgroundColor: color.replace(')', ', 0.1)').replace('rgb', 'rgba'),
                        }]
                    },
                    options: {
                        plugins: { legend: { display: false }, tooltip: { enabled: false } },
                        scales: { x: { display: false }, y: { display: false } },
                        elements: { line: { borderWidth: 2 } },
                    }
                });
            }

            createMiniLineChart('totalRevenueChart', easyData, dataLabels, 'rgb(79, 70, 229)'); 
            createMiniLineChart('affiliateRevenueChart', mediumData, dataLabels, 'rgb(236, 72, 153)');
            createMiniLineChart('refundsChart', hardData, dataLabels, 'rgb(6, 182, 212)');
            
            const acqCtx = document.getElementById('customerAcquisitionChart');
            if(acqCtx) {
                new Chart(acqCtx, {
                    type: 'line',
                    data: {
                        labels: ratioDates, 
                        datasets: [
                            {
                                label: 'Tỉ lệ chơi đơn (%)',
                                data: soloRatioData,
                                borderColor: 'rgb(79, 70, 229)', 
                                backgroundColor: 'rgb(79, 70, 229, 0.2)',
                                tension: 0.4,
                                fill: true,
                            },
                            {
                                label: 'Tỉ lệ chơi đôi (%)',
                                data: duoRatioData,
                                borderColor: 'rgb(236, 72, 153)',
                                backgroundColor: 'rgb(236, 72, 153, 0.2)',
                                tension: 0.4,
                                fill: true,
                            },
                            {
                                label: 'Tỉ lệ chơi 3 người (%)',
                                data: trioRatioData,
                                borderColor: 'rgb(6, 182, 212)',
                                backgroundColor: 'rgb(236, 72, 153, 0.2)',
                                tension: 0.4,
                                fill: true,
                            },
                            {
                                label: 'Tỉ lệ chơi 4 người (%)',
                                data: quarRatioData,
                                borderColor: 'rgb(46, 182, 112)',
                                backgroundColor: 'rgb(236, 72, 153, 0.2)',
                                tension: 0.4,
                                fill: true,
                            }
                        ]
                    },
                    options: {
                        plugins: { legend: { position: 'bottom' } },
                        scales: { 
                            x: { grid: { display: false } }, 
                            y: { 
                                beginAtZero: true,
                                callbacks: {
                                    label: function(context) {
                                        return context.parsed.y + '%';
                                    }
                                }
                            } 
                        }
                    }
                });
            }
            const pieCtx = document.getElementById('productCategoryChart');
            if(pieCtx) {
                new Chart(pieCtx, {
                    type: 'doughnut',
                    data: {
                        labels: challengeLabels, 
                        datasets: [{
                            data: challengeData, 
                            backgroundColor: [
                                'rgb(79, 70, 229)',  
                                'rgb(236, 72, 153)',  
                                'rgb(6, 182, 212)', 
                                'rgb(34, 197, 94)' 
                            ],
                            hoverOffset: 4
                        }]
                    },
                    options: {
                        plugins: { 
                            legend: { position: 'right' },
                            tooltip: {
                                callbacks: {
                                    label: function(context) {
                                        let total = context.dataset.data.reduce((a, b) => a + b, 0);
                                        let value = context.parsed;
                                        let percentage = (value / total * 100).toFixed(2) + '%';
                                        return context.label + ': ' + value + ' đề (' + percentage + ')';
                                    }
                                }
                            }
                        }
                    }
                });
            }
        });
    </script>
}