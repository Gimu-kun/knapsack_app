@page "/room"
@model knapsack_app.Pages.Cli.WaitingRoomModel
@{
    Layout = "_Cli_Layout";
}
<link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@24,400,0,0&icon_names=person_add" />

<section class="py-12 bg-gray-50 min-h-screen">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        
        <div class="text-center mb-10">
            <h1 class="text-5xl font-extrabold tracking-tight text-indigo-700">
                Ph√≤ng Ch·ªù
            </h1>
            <p class="mt-4 text-xl text-gray-600">M√£ Ph√≤ng c·ªßa b·∫°n:</p>
            <div class="flex items-center inline-block p-4 mt-2 bg-white border-4 border-indigo-400 rounded-xl shadow-lg transform hover:scale-[1.01] transition duration-200 cursor-pointer">
                <span id="room-id-display" class="text-4xl font-mono text-indigo-900 tracking-wider font-extrabold select-all" onclick="navigator.clipboard.writeText('@Model.Id'); alert('ƒê√£ sao ch√©p m√£ ph√≤ng!')">
                    @Model.Id 
                </span>
            </div>
        </div>

        <div class="max-w-xl mx-auto mb-10 p-6 bg-white rounded-xl shadow-lg border border-gray-200">
            <div class="flex items-center justify-between">
                <h2 class="text-2xl font-bold text-gray-800 flex items-center">
                    üëë C√†i ƒë·∫∑t tr√≤ ch∆°i
                </h2>
                <span id="difficulty-display" class="text-xl font-extrabold text-green-600">D·ªÑ</span> 
            </div>
            
            <div id="host-difficulty-control" class="mt-4 hidden">
                <label for="difficulty-select" class="block text-sm font-medium text-gray-700 mb-2">Ch·ªçn ƒê·ªô Kh√≥:</label>
                <select id="difficulty-select" class="mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-lg rounded-md">
                    <option value="easy">D·ªÖ</option>
                    <option value="medium">Trung b√¨nh</option>
                    <option value="hard">Kh√≥</option>
                </select>
            </div>
            
            <div id="member-difficulty-message" class="mt-4 text-center p-3 bg-indigo-50 border border-indigo-200 rounded-lg">
                <p class="text-indigo-700 font-medium">ƒêang ch·ªù Ch·ªß ph√≤ng thi·∫øt l·∫≠p ƒë·ªô kh√≥...</p>
            </div>
        </div>


        <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6" id="player-list-container">
        </div>

        <div class="mt-12 flex justify-center flex-col items-center">
            <a href="#"
                id="btn-start-game"
                class="inline-flex items-center justify-center px-10 py-4 border border-transparent text-xl font-bold rounded-lg text-white bg-green-600 hover:bg-green-700 transition duration-300 shadow-xl uppercase tracking-wider hidden disabled:opacity-50 disabled:cursor-not-allowed"
                >
                <svg class="w-6 h-6 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z"></path></svg>
                B·∫Øt ƒë·∫ßu tr√≤ ch∆°i
            </a>
            
            <p id="waiting-for-host-message" class="text-xl font-semibold text-gray-700 p-4 border rounded-lg bg-yellow-50 mt-4">
                ƒêang ch·ªù Ch·ªß ph√≤ng b·∫Øt ƒë·∫ßu...
            </p>
        </div>

    </div>
</section>

@section Scripts {
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/6.0.1/signalr.js"></script> 
<script>
    const currentUserId = "@Model.CurrentUser?.Id";
    const currentUsername = "@Model.CurrentUser?.Account";
    const currentAvatar = "@Model.CurrentUser?.Avatar";

    // ‚úÖ TH√äM BI·∫æN L∆ØU TR·ªÆ ƒê·ªò KH√ì HI·ªÜN T·∫†I
    let currentDifficulty = 'easy';

    // H√†m chuy·ªÉn ƒë·ªïi gi√° tr·ªã ƒë·ªô kh√≥ sang chu·ªói hi·ªÉn th·ªã
    function getDifficultyText(value) {
        switch (value) {
            case 'easy': return 'D·ªÑ';
            case 'medium': return 'TRUNG B√åNH';
            case 'hard': return 'KH√ì';
            default: return 'Kh√¥ng x√°c ƒë·ªãnh';
        }
    }
    
    // H√†m c·∫≠p nh·∫≠t m√†u cho hi·ªÉn th·ªã ƒë·ªô kh√≥
    function getDifficultyColorClass(value) {
        switch (value) {
            case 'easy': return 'text-green-600';
            case 'medium': return 'text-yellow-600';
            case 'hard': return 'text-red-600';
            default: return 'text-gray-600';
        }
    }


    $(document).ready(function () {
        const urlParams = new URLSearchParams(window.location.search);
        const roomId = urlParams.get('id');
        
        if (!currentUserId || !currentUsername) {
            window.location.href = '/login';
            return;
        }

        if (!roomId) {
            alert("L·ªói: Kh√¥ng t√¨m th·∫•y ID ph√≤ng.");
            window.location.href = '/selection';
            return;
        }

        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/roomHub")
            .withAutomaticReconnect()
            .build();

        let isHost = false;
        
        // --- X·ª≠ l√Ω s·ª± ki·ªán t·ª´ Server ---

        // 2. L·∫Øng nghe c·∫≠p nh·∫≠t danh s√°ch ng∆∞·ªùi ch∆°i
        connection.on("PlayersUpdated", function (players) {
            console.log("Danh s√°ch ng∆∞·ªùi ch∆°i c·∫≠p nh·∫≠t:", players);
            updatePlayerList(players);
        });
        
        // ‚úÖ TH√äM: 3. L·∫Øng nghe c·∫≠p nh·∫≠t ƒê·ªô kh√≥
        connection.on("DifficultyUpdated", function (difficulty) {
            currentDifficulty = difficulty;
            const diffText = getDifficultyText(difficulty);
            const diffColor = getDifficultyColorClass(difficulty);
            
            // C·∫≠p nh·∫≠t hi·ªÉn th·ªã ƒë·ªô kh√≥ cho t·∫•t c·∫£ ng∆∞·ªùi ch∆°i
            $('#difficulty-display').text(diffText).removeClass('text-green-600 text-yellow-600 text-red-600').addClass(diffColor);
            
            // C·∫≠p nh·∫≠t th√¥ng b√°o ch·ªù cho Member
            if (!isHost) {
                $('#member-difficulty-message p').text(`ƒê·ªô kh√≥ ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t l√†: ${diffText}`);
            }
        });


        // 4. L·∫Øng nghe th√¥ng b√°o v·ªÅ Vai tr√≤ (Host/Member)
        connection.on("RoleAssigned", function (isHostRole) {
            isHost = isHostRole;
            
            // C·∫≠p nh·∫≠t hi·ªÉn th·ªã n√∫t B·∫Øt ƒë·∫ßu v√† control ƒë·ªô kh√≥
            if (isHost) {
                $('#btn-start-game').removeClass('hidden');
                $('#waiting-for-host-message').addClass('hidden');
                
                // HOST CONTROL
                $('#host-difficulty-control').removeClass('hidden');
                $('#member-difficulty-message').addClass('hidden');
                
                // ƒê·ªìng b·ªô h√≥a select v·ªõi ƒë·ªô kh√≥ hi·ªán t·∫°i (n·∫øu Host m·ªõi tham gia)
                $('#difficulty-select').val(currentDifficulty);
            } else {
                $('#btn-start-game').addClass('hidden');
                $('#waiting-for-host-message').removeClass('hidden');
                
                // MEMBER VIEW
                $('#host-difficulty-control').addClass('hidden');
                $('#member-difficulty-message').removeClass('hidden');
            }
        });

        // 5. L·∫Øng nghe l·ªánh B·∫Øt ƒë·∫ßu Tr√≤ ch∆°i
        connection.on("GameStarted", function (roomId, difficulty) {
            alert(`Tr√≤ ch∆°i b·∫Øt ƒë·∫ßu v·ªõi ƒë·ªô kh√≥: ${getDifficultyText(difficulty)}`);
            window.location.href = `/play?room=${roomId}&difficulty=${difficulty}`;
        });
        
        // --- H√†m giao di·ªán ---

        function updatePlayerList(players) {
            const container = $('#player-list-container'); 
            container.empty();
            
            players.forEach(player => {
                const isMe = player.userId === currentUserId;
                const hostClass = player.isHost ? "border-indigo-500 shadow-xl" : "border-gray-300 shadow-md";
                const bgClass = player.isHost ? "bg-indigo-100 border-indigo-400" : "bg-gray-200 border-gray-400";
                
                const hostLabel = player.isHost 
                    ? `<span class="absolute top-0 right-0 mt-2 mr-2 text-xs font-bold uppercase text-white bg-indigo-600 px-2 py-1 rounded-full">Ch·ªß Ph√≤ng</span>`
                    : '';

                let avatarContent;
                if (player.avatar && player.avatar.trim() !== "") {
                    // N·∫øu c√≥ Avatar, hi·ªÉn th·ªã ·∫£nh
                    avatarContent = `<img src="${player.avatar}" alt="${player.username}" class="w-full h-full object-cover rounded-full" onerror="this.onerror=null; this.parentElement.innerHTML='<span class=\\'material-symbols-outlined text-gray-500 text-3xl\\'>person</span>';" />`;
                } else {
                    // N·∫øu kh√¥ng c√≥ Avatar, hi·ªÉn th·ªã ch·ªØ c√°i ƒë·∫ßu
                    avatarContent = `
                        <div class="h-full w-full rounded-full flex items-center justify-center text-gray-700 font-extrabold text-2xl">
                             ${player.username.substring(0, 1).toUpperCase()}
                        </div>
                    `;
                }

                const playerHtml = `
                    <div class="p-5 border-2 ${hostClass} rounded-xl bg-white flex flex-col items-center space-y-3 relative min-h-[180px] hover:shadow-2xl transition duration-200">
                        ${hostLabel}
                        <div class="w-16 h-16 ${bgClass} rounded-full border-4 flex items-center justify-center overflow-hidden">
                            ${avatarContent}
                        </div>
                        <p class="font-bold text-lg text-gray-900 truncate w-full text-center">
                            ${player.username} ${isMe ? ' <span class="text-sm font-normal text-indigo-500">(B·∫°n)</span>' : ''}
                        </p>
                        <p class="text-sm text-gray-600">
                            ƒêi·ªÉm t√≠ch lu·ªπ: <span class="font-extrabold text-green-600">${player.score.toLocaleString('vi-VN')}</span>
                        </p>
                    </div>`;
                container.append(playerHtml);
            });
            
            // Th√™m c√°c √¥ tr·ªëng n·∫øu ch∆∞a ƒë·ªß 4 ng∆∞·ªùi
            for (let i = players.length; i < 4; i++) {
                 const emptySlotHtml = `
                    <div class="p-5 border-2 border-dashed border-gray-300 rounded-xl bg-gray-50 flex flex-col items-center justify-center space-y-2 min-h-[180px]">
                        <span class="material-symbols-outlined text-gray-400 text-4xl">
                            person_add
                        </span>
                        <p class="font-semibold text-gray-500 text-base">ƒêang ch·ªù ng∆∞·ªùi ch∆°i...</p>
                    </div>`;
                container.append(emptySlotHtml);
            }
        }

        // --- Kh·ªüi t·∫°o v√† B·∫Øt ƒë·∫ßu ---
        connection.start().then(function () {
            connection.invoke("JoinRoom", roomId, currentUserId, currentUsername, currentAvatar).catch(function (err) {
                return console.error(err.toString());
            });
        }).catch(function (err) {
            return console.error("SignalR Connection Error: " + err.toString());
        });
        
        // --- X·ª≠ l√Ω s·ª± ki·ªán ƒê·ªô kh√≥ ---
        $('#difficulty-select').on('change', function() {
            const newDifficulty = $(this).val();
            if (isHost) {
                // G·ª≠i l·ªánh c·∫≠p nh·∫≠t ƒë·ªô kh√≥ l√™n Hub
                connection.invoke("SetDifficulty", roomId, newDifficulty).catch(function (err) {
                    return console.error("Error setting difficulty: " + err.toString());
                });
            }
        });


        // --- X·ª≠ l√Ω n√∫t b·∫•m ---

        $('#btn-start-game').on('click', function(e) {
            e.preventDefault();
            if (isHost) {
                // L·∫•y ƒë·ªô kh√≥ ƒë√£ ch·ªçn cu·ªëi c√πng
                const selectedDifficulty = $('#difficulty-select').val();
                
                // G·ª≠i l·ªánh StartGame l√™n Hub, k√®m theo ƒë·ªô kh√≥
                connection.invoke("StartGame", roomId, selectedDifficulty).catch(function (err) {
                    return console.error("Error starting game: " + err.toString());
                });
            } else {
                alert("B·∫°n kh√¥ng ph·∫£i Ch·ªß ph√≤ng ƒë·ªÉ b·∫Øt ƒë·∫ßu tr√≤ ch∆°i.");
            }
        });

    });
</script>
}