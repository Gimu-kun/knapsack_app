@page "/play"
@model knapsack_app.Pages.Cli.PlayGameModel
@{
    // Thi·∫øt l·∫≠p Layout cho trang
    Layout = "_Cli_Layout";
    ViewData["Title"] = "Knapsack 0/1 Game";
}

<script src="https://cdn.tailwindcss.com"></script>
<link href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined" rel="stylesheet" />
<link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;700;900&display=swap" rel="stylesheet">

<link rel="stylesheet" href="~/css/playgame.css">

@{
    var challengeId = Model.Challenge_id;
    var gameData = Model.InputGameData;
    var items = Model.Items;
    var capacity = gameData.MaxCapacity;
    var dpRows = Model.DPBoard.GetLength(0);
    var dpCols = Model.DPBoard.GetLength(1);
    var missedCells = Model.MissArray.Select(c => (c.X, c.Y)).ToHashSet();
    var interactiveCellsCount = missedCells.Count;
    var maxDurationDisplay = gameData.MaxDuration;
    // L·∫§Y GI√Å TR·ªä T·ªêI ∆ØU T·ª™ √î CU·ªêI C√ôNG DP[i-1][w]
    var optimalValue = Model.DPBoard[items.Count, capacity]; 
    
    Func<int, string> formatTime = (totalSeconds) => {
        var minutes = totalSeconds / 60;
        var seconds = totalSeconds % 60;
        return $"{minutes.ToString().PadLeft(2, '0')}:{seconds.ToString().PadLeft(2, '0')}";
    };
}

@* ƒê·∫£m b·∫£o token ch·ªëng gi·∫£ m·∫°o (CSRF) ƒë∆∞·ª£c render tr√™n trang *@
@Html.AntiForgeryToken()

@if (!Model.GameStarted)
{
    <div id="start-screen" class="fixed inset-0 bg-gray-900 bg-opacity-95 flex flex-col items-center justify-center z-50 p-4">
        <h2 class="text-5xl font-extrabold text-white mb-6">S·∫¥N S√ÄNG CHO KNAPSACK 0/1?</h2>
        <p class="text-xl text-gray-300 mb-10">Challenge: @Model.Challenge_id |
            Capacity: @capacity kg</p>
        
        <div class="space-x-6">
            <button id="start-game-btn" class="px-8 py-4 bg-green-500 text-white text-xl font-bold rounded-xl shadow-2xl hover:bg-green-600 transition duration-300 transform hover:scale-105">
                üî• B·∫ÆT ƒê·∫¶U TR√í CH∆†I
            </button>
            <a href="/selection" class="px-8 py-4 bg-gray-500 text-white text-xl font-bold rounded-xl shadow-2xl hover:bg-gray-600 
                transition duration-300">
                ‚¨ÖÔ∏è QUAY L·∫†I
            </a>
        </div>
    </div>
}

<div id="countdown-modal" class="fixed inset-0 bg-gray-900 bg-opacity-90 flex items-center justify-center z-[100] hidden">
    <span id="countdown-display" class="text-9xl font-extrabold text-white animate-pulse">3</span>
</div>

<body class="bg-gray-100 text-gray-800 pt-16 font-[Inter]">

    <div id="utility-toolbar" class="fixed top-1/2 left-0 transform -translate-y-1/2 ml-4 z-50 flex flex-col space-y-3">
        <button id="reveal-cell-button" class="utility-btn bg-purple-500 text-white hover:bg-purple-600" title="üóùÔ∏èTi·∫øt L·ªô √î DP (Cost: 1000)">
            <span class="material-symbols-outlined">
            stylus_fountain_pen
            </span>
        </button>
    </div>
    <main class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-10">

        <div class="bg-white p-6 rounded-xl shadow-lg border-b-4 border-blue-500 mb-8">
            <h1 class="text-3xl font-extrabold text-gray-900 mb-4 tracking-tight sm:text-4xl">
                KNAPSACK 0/1: <span class="text-blue-600">MISSION @challengeId</span>
            </h1>
            
            <div class="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-6 gap-4 text-sm font-semibold uppercase">
                
                <div class="p-3 bg-indigo-50 rounded-lg text-indigo-800">
                    <span class="block text-xs font-normal text-gray-500">ƒêi·ªÉm Hi·ªán T·∫°i</span>
                    <span id="current-score" class="text-2xl font-bold">0</span>
                </div>
                
                <div class="p-3 bg-blue-50 rounded-lg text-blue-800">
                    <span class="block text-xs font-normal text-gray-500">S·ª©c ch·ª©a (W)</span>
                    <span class="text-2xl font-bold">@gameData.MaxCapacity</span>
                </div>
                <div class="p-3 bg-green-50 rounded-lg text-green-800">
                    <span class="block text-xs font-normal text-gray-500">Th·ªùi l∆∞·ª£ng</span>
                    <span class="text-2xl font-bold">@formatTime(maxDurationDisplay)</span>
                </div>
                <div class="p-3 bg-red-50 rounded-lg text-red-800">
                    <span class="block text-xs font-normal text-gray-500">S·ªë √¥ khuy·∫øt</span>
                    <span class="text-2xl font-bold">@gameData.MissCount</span> √¥
                </div>
                <div class="p-3 bg-yellow-50 rounded-lg text-yellow-800">
                    <span class="block text-xs font-normal text-gray-500">ƒê·ªô kh√≥</span>
                    <span class="text-2xl font-bold">@(
                        gameData.Difficulty == 1 ?
                        "D·ªÖ" : 
                        gameData.Difficulty == 2 ?
                        "Trung B√¨nh" : 
                        "Kh√≥"
                    )</span>
                </div>
                <div id="timer-container" class="p-3 bg-gray-200 rounded-lg text-red-800">
                    <span class="block text-xs font-normal text-gray-500">Th·ªùi Gian C√≤n L·∫°i</span>
                    <span id="game-timer" class="text-2xl font-extrabold">
                        @formatTime(maxDurationDisplay)
                    </span>
                </div>
            </div>
        </div>

        <div class="grid grid-cols-1 lg:grid-cols-4 gap-8">

            <div class="lg:col-span-3 space-y-8">

                <div class="bg-white p-6 rounded-xl shadow-lg sticky top-20">
                    <h3 class="text-2xl font-bold mb-4 text-gray-900">1.
                        Danh S√°ch V·∫≠t Ph·∫©m</h3>
                    <p class="text-sm text-gray-600 mb-4">Th√¥ng s·ªë c∆° b·∫£n c·ªßa c√°c v·∫≠t ph·∫©m.</p>

                    <div class="overflow-x-auto">
                        <table class="min-w-max text-sm text-center text-gray-500 border-collapse table-fixed">
                            <thead class="text-xs text-gray-700 uppercase bg-gray-50">
                                <tr>
                                    <th scope="col" class="px-4 py-2 text-left w-32 min-w-32">Thu·ªôc t√≠nh \ Item</th>
                                    @for (int i = 0; i < items.Count; i++)
                                    {
                                        var item = items[i];
                                        <th scope="col"
                                            class="px-4 py-2 font-bold text-gray-900 border-l border-gray-300 w-24 min-w-24">
                                            Vp.
                                            @(i + 1) (@item.Name)
                                        </th>
                                    }
                                </tr>
                            </thead>
                            <tbody>
                                <tr 
                                    class="bg-white border-b hover:bg-gray-50">
                                    <th scope="row" class="px-4 py-2 font-medium text-gray-900 text-left bg-blue-50">
                                        Gi√° Tr·ªã
                                    </th>
                                    @foreach (var item in items)
                                    {
                                        <td class="px-4 py-2 text-green-600 font-semibold border-l border-gray-200">
                                            @item.Value
                                        </td>
                                    }
                                </tr>
                                <tr class="bg-white hover:bg-gray-50">
                                    <th scope="row"
                                        class="px-4 py-2 font-medium text-gray-900 text-left bg-blue-50 border-t border-gray-200">
                                        Tr·ªçng L∆∞·ª£ng
                                    </th>
                                    @foreach (var item in items)
                                    {
                                        <td class="px-4 py-2 text-red-600 font-semibold border-t border-l border-gray-200">
                                            @item.Weight 
                                        </td>
                                    }
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>

                <div class="bg-white p-4 rounded-xl shadow-lg border-l-4 border-yellow-500">
                    <button id="hint-button"
                        class="w-full flex justify-between items-center text-left text-lg font-bold text-yellow-800 hover:text-yellow-600 transition">
                        <span>üí° G·ª£i √ù (Hint)</span>
                        <span id="hint-icon">‚ñ∂</span>
                    </button>

                    <div id="hint-content" class="mt-3 overflow-hidden transition-max-h duration-500 ease-in-out"
                        style="max-height: 0;">
                        <hr class="my-3">
                        <h4 class="text-md font-bold mb-2 text-gray-900">Thu·∫≠t To√°n Quy Ho·∫°ch ƒê·ªông (DP)</h4>
                        <p class="text-sm text-gray-700 mb-2">Gi√° tr·ªã t·∫°i √¥ $DP[i][w]$ l√† gi√° tr·ªã l·ªõn nh·∫•t c√≥ th·ªÉ ƒë·∫°t
                            ƒë∆∞·ª£c khi
                            ch·ªçn t·ª´ **$i$ v·∫≠t ph·∫©m ƒë·∫ßu ti√™n** v·ªõi **t√∫i c√≥ s·ª©c ch·ª©a $w$**.</p>

                        <p class="text-sm font-semibold text-blue-600 mt-3">C√¥ng Th·ª©c Truy H·ªìi (Recurrence Relation):
                        </p>
                        <div class="bg-blue-50 p-3 rounded-lg overflow-x-auto text-xs font-mono">
                            <pre>
i: V·∫≠t ph·∫©m hi·ªán t·∫°i ƒëang x√©t (Item i)
w: S·ª©c ch·ª©a hi·ªán t·∫°i c·ªßa t√∫i (Capacity w)
W_i: Tr·ªçng l∆∞·ª£ng c·ªßa Item i
V_i: Gi√° tr·ªã c·ªßa Item i

N·∫øu W_i > w (V·∫≠t ph·∫©m qu√° n·∫∑ng):
    DP[i][w] = DP[i-1][w]
    (Kh√¥ng th·ªÉ ch·ªçn Item i, gi·ªØ nguy√™n gi√° tr·ªã t·ªëi ∆∞u c·ªßa i-1)

N·∫øu W_i &lt;= w (V·∫≠t ph·∫©m v·ª´a v·∫πn):
    DP[i][w] = max(
    DP[i-1][w],                         // TH1: Kh√¥ng ch·ªçn Item i
    V_i + DP[i-1][w - W_i]              // TH2: Ch·ªçn Item i
    )
(L·∫•y gi√° tr·ªã l·ªõn nh·∫•t gi·ªØa vi·ªác KH√îNG ch·ªçn v√† C√ì ch·ªçn Item i)
                            </pre>
                        </div>
                        <p class="text-sm text-gray-600 mt-3 italic">
                            **Gi√° tr·ªã t·ªëi ∆∞u** cu·ªëi c√πng s·∫Ω n·∫±m ·ªü √¥ $DP[@items.Count][@capacity]$.
                        </p>
                    </div>
                </div>

                <div class="bg-white p-6 rounded-xl shadow-lg">
                    <h3 class="text-2xl font-bold mb-4 text-gray-900">2.
                        B·∫£ng Quy Ho·∫°ch ƒê·ªông</h3>
                    <p class="text-sm text-gray-600 mb-4">Gi√° tr·ªã t·ªëi ƒëa ƒë·∫°t ƒë∆∞·ª£c khi x√©t $i$ v·∫≠t ph·∫©m ƒë·∫ßu ti√™n v√† c√≥
                        s·ª©c ch·ª©a $w$.</p>

                    <div class="overflow-x-auto dp-table-container">
                        <table class="min-w-full border-collapse table-fixed border border-gray-300">
                            <thead class="bg-gray-100 sticky top-0 z-10">
                                <tr>
                                    <th class="dp-header-i w-10 bg-gray-300 text-gray-600 border border-gray-300">
                                        i\w
                                    </th>
                                    @for (int w = 0; w < dpCols; w++)
                                    {
                                        <th class="dp-header-w w-12 text-gray-600 font-bold border border-gray-300">
                                            @w
                                        </th>
                                    }
                                </tr>
                            </thead>
                            <tbody id="dp-board-body">
                                @for (int i = 0; i < dpRows; i++)
                                {
                                    <tr class="h-12 border-t border-gray-300">
                                        <th class="dp-header-i w-10 bg-gray-200 text-red-600 font-bold border border-gray-300">
                                            @(i)
                                        </th>
                                        @for (int w = 0; w < dpCols; w++)
                                        {
                                            var cellValue = Model.DPBoard[i, w];
                                            var cellId = $"dp-cell-{i}-{w}";
                                            
                                            var isBoundary = i == 0 || w == 0;
                                            // KI·ªÇM TRA: √î n√†y c√≥ n·∫±m trong danh s√°ch c√°c l·ªó b·ªã ƒë·ª•c kh√¥ng?
                                            var isMissedCell = missedCells.Contains((i, w));
                                            <td id="@cellId" 
                                                class="dp-cell text-center border border-gray-300 p-0"
                                                data-i="@i"
                                                data-w="@w"
                                                data-correct-value="@cellValue"
                                                data-is-input="@(isMissedCell ? "true" : "false")"
                                                data-is-completed="false">

                                                @if (isBoundary) // √î Bi√™n (H√†ng/C·ªôt 0): Lu√¥n hi·ªÉn th·ªã
                                                {
                                                    <div class="cell-content w-full h-full flex items-center justify-center">
                                                        <span class="dp-value text-gray-700 font-semibold">@cellValue</span>
                                                    </div>
                                                }
                                                else if (isMissedCell) // √î b·ªã ƒê·ª•c L·ªó (trong MissArray): Hi·ªÉn th·ªã Input
                                                {
                                                    <div class="cell-content w-full h-full flex items-center justify-center">
                                                        <input type="number" 
                                                            class="dp-input w-full h-full text-center font-bold text-gray-900 bg-yellow-50 focus:border-blue-500 p-1 m-0 appearance-none border-none"
                                                            min="0"
                                                            max="999"
                                                            data-i="@i"
                                                            data-w="@w"
                                                            autocomplete="off" /> 

                                                        <span class="dp-value-hidden hidden">@cellValue</span>
                                                    </div>
                                                }
                                                else // √î B√™n Trong Kh√°c: Hi·ªÉn th·ªã Mask (tr·ªëng)
                                                {
                                                    <span class="dp-hidden-mask text-gray-400 font-extrabold text-xl select-none block"></span>
                                                    <span class="dp-value-hidden hidden">@cellValue</span>
                                                }
                                            </td>
                                        }
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
                
                <div id="knapsack-section" class="bg-white p-6 rounded-xl shadow-lg hidden">
                    <h3 class="text-2xl font-bold mb-4 text-gray-900">3.
                        Knapsack (T√∫i)</h3>
                    <p class="text-sm text-gray-600 mb-4">K√©o v·∫≠t ph·∫©m v√†o ƒë√¢y.
                        T·ªïng tr·ªçng l∆∞·ª£ng kh√¥ng qu√°
                        @capacity kg.</p>

                    <div id="knapsack-dropzone" class="knapsack-dropzone border-2 border-dashed border-gray-400 p-4 rounded-xl flex flex-wrap gap-2 min-h-[100px] items-center justify-start transition duration-300">
                        <div class="w-full text-center text-gray-500 p-8 placeholder-content">
                            <svg class="mx-auto w-10 h-10 text-gray-400" fill="none" stroke="currentColor"
                                viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                    d="M21 13.255A23.518 23.518 0 0112 15c-3.15 0-6.11-.826-8.75-2.255L3 18v2h18v-7.745zM12 3a9 9 0 00-9 9h18a9 9 0 00-9-9z">
                                </path>
                            </svg>
                            <p class="mt-2">K√©o v·∫≠t ph·∫©m v√†o ƒë√¢y</p>
                        </div>
                    </div>

                    <div class="mt-4 p-3 bg-gray-50 rounded-lg border">
                        <p class="text-lg font-bold">T·ªïng Gi√° Tr·ªã: <span id="total-value"
                                class="text-green-600">0</span></p>
                        <p class="text-lg font-bold">T·ªïng 
                            Tr·ªçng L∆∞·ª£ng: <span id="total-weight"
                                class="text-red-600">0</span> / @capacity kg</p>
                    </div>

                    </div>
            </div>

            <div class="lg:col-span-1">
                <div id="items-section" class="sticky top-20 space-y-4 hidden"> 
                    <div class="bg-white p-4 rounded-xl shadow-lg">
                        <h3 class="text-xl font-bold text-gray-900 mb-2">4.
                            V·∫≠t Ph·∫©m ƒê·ªÉ Ch·ªçn</h3>
                        <p class="text-sm text-gray-600 mb-3">T·ªïng c·ªông: @items.Count v·∫≠t ph·∫©m.</p>

                        <div id="drag-items-container" class="flex flex-col gap-3 max-h-[85vh] overflow-y-auto pr-2">
                            @foreach (var item in items)
                            {
                                <div class="drag-item bg-white p-3 rounded-lg shadow border border-gray-200 hover:ring-2 hover:ring-blue-300 transition duration-150 cursor-grab" draggable="true" data-id="@item.Id" data-value="@item.Value"
                                    data-weight="@item.Weight" data-name="@item.Name">
                                    <p class="text-sm font-bold text-gray-900">@item.Name</p>
                                    <div class="flex justify-between text-xs mt-1">
                                        <p class="text-green-600">V: <strong>@item.Value</strong></p>
                                        <p class="text-red-600">W: <strong>@item.Weight</strong> kg</p>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
        </div>
    </main>
    <div id="final-results-modal" class="fixed inset-0 bg-gray-900 bg-opacity-95 flex flex-col items-center justify-center z-50 p-4 hidden">
        <div class="bg-white p-10 rounded-xl shadow-2xl text-center max-w-lg w-full">
            <h2 class="text-4xl font-extrabold text-green-600 mb-4">üéâ HO√ÄN TH√ÄNH TH·ª¨ TH√ÅCH! üéâ</h2>
            <p class="text-lg text-gray-700 mb-6">B·∫°n ƒë√£ t√¨m ƒë∆∞·ª£c t·ªï h·ª£p v·∫≠t ph·∫©m ƒë·∫°t gi√° tr·ªã T·ªëi ∆Øu: <span id="optimal-value-display" class="font-bold text-blue-600"></span></p>

            <div class="space-y-3 p-4 bg-gray-50 rounded-lg mb-8">
                <p class="text-xl font-bold text-gray-800">T·ªïng ƒëi·ªÉm ƒë·∫°t ƒë∆∞·ª£c: <span id="final-score-display" class="text-3xl text-indigo-700">0</span></p>
                <p class="text-xl font-bold text-gray-800">Th·ªùi gian ƒë√£ s·ª≠ d·ª•ng: <span id="time-used-display" class="text-3xl text-red-700">00:00</span></p>
            </div>
            
            <a id="ranking-btn" href="/rank?players=1&difficulty=1" class="px-8 py-3 bg-blue-500 text-white text-xl font-bold rounded-xl shadow-lg hover:bg-blue-600 transition duration-300 transform hover:scale-105 inline-block">
                üèÜ XEM B·∫¢NG X·∫æP H·∫†NG
            </a>
        </div>
    </div>
@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/canvas-confetti@1.9.3/dist/confetti.browser.min.js"></script>
    <script>
        const API_BASE_URL = '/api/Game/AdjustScore';
        let takenId = null;
        const knapsack = document.getElementById('knapsack-dropzone');
        const itemsContainer = document.getElementById('drag-items-container');
        const maxCapacity = @gameData.MaxCapacity;
        // Tr·∫°ng th√°i game (ban ƒë·∫ßu l·∫•y t·ª´ Model)
        let gameActive = @(Model.GameStarted.ToString().ToLower());
        const interactiveCellsCount = @interactiveCellsCount; 
        let remainingInputCells = interactiveCellsCount;
        
        const dpBoardBody = document.getElementById('dp-board-body');
        const startScreen = document.getElementById('start-screen');
        const startGameBtn = document.getElementById('start-game-btn');
        const revealButton = document.getElementById('reveal-cell-button');
        const challengeId = '@challengeId';
        
        // --- KHAI B√ÅO C√ÅC BI·∫æN M·ªöI ---
        const knapsackSection = document.getElementById('knapsack-section');
        const itemsSection = document.getElementById('items-section');
        const OPTIMAL_VALUE = @optimalValue; // GI√Å TR·ªä T·ªêI ∆ØU ƒê∆Ø·ª¢C L·∫§Y T·ª™ RAZOR
        const MAX_DURATION_SECONDS = @maxDurationDisplay;
        const finalResultsModal = document.getElementById('final-results-modal');
        const finalScoreDisplay = document.getElementById('final-score-display');
        const timeUsedDisplay = document.getElementById('time-used-display');
        const optimalValueDisplay = document.getElementById('optimal-value-display');
        const countdownModal = document.getElementById('countdown-modal');
        const countdownDisplay = document.getElementById('countdown-display');
        // --- K·∫æT TH√öC KHAI B√ÅO C√ÅC BI·∫æN M·ªöI ---

        // ƒêi·ªÉm th∆∞·ªüng/ph·∫°t
        const SCORE_CORRECT = 500;
        const SCORE_INCORRECT = -100;
        const REVEAL_COST = 1000;

        // H√†m t·∫°o ID ph√≤ng ng·∫´u nhi√™n
        function generateTeamId() {
            // T·∫°o 5 ch·ªØ s·ªë ng·∫´u nhi√™n
            const randomDigits = Math.floor(10000 + Math.random() * 90000); 
            return `T-${randomDigits}`;
        }
        
        const scoreElement = document.getElementById('current-score');
        async function adjustScoreOnServer(scoreChange) {
            if (!takenId) {
                console.error("L·ªói: Kh√¥ng t√¨m th·∫•y Taken ID.");
                return;
            }

            try {
                const response = await fetch(API_BASE_URL, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        takenId: takenId,
                        scoreChange: scoreChange
                    })
                });
                const data = await response.json();
                console.log(data);
                if (response.ok && data.success) {
                    console.log(`ƒêi·ªÉm ƒë√£ ƒë∆∞·ª£c ƒëi·ªÅu ch·ªânh. ƒêi·ªÉm m·ªõi: ${data.newScore}`);
                    // C·∫≠p nh·∫≠t ƒëi·ªÉm tr√™n UI
                    if (scoreElement) {
                        scoreElement.textContent = data.newScore;
                    }
                    
                    // Hi·ªÉn th·ªã th√¥ng b√°o ho·∫∑c hi·ªáu ·ª©ng th√†nh c√¥ng/th·∫•t b·∫°i tr√™n UI
                    showScoreFeedback(scoreChange);
                } else {
                    console.error("L·ªói ƒëi·ªÅu ch·ªânh ƒëi·ªÉm t·ª´ Server:", data.message || "L·ªói kh√¥ng x√°c ƒë·ªãnh");
                }
            } catch (error) {
                console.error("L·ªói k·∫øt n·ªëi API ƒëi·ªÅu ch·ªânh ƒëi·ªÉm:", error);
            }
        }

        function showScoreFeedback(scoreChange) {
            // ƒê√¢y l√† v√≠ d·ª• v·ªÅ hi·ªáu ·ª©ng n·ªïi (floating effect)
            const feedback = document.createElement('div');
            feedback.textContent = (scoreChange > 0 ? '+' : '') + scoreChange;
            feedback.className = 'score-feedback';
            // Th√™m class m√†u s·∫Øc
            if (scoreChange > 0) {
                feedback.classList.add('score-correct');
            } else {
                feedback.classList.add('score-incorrect');
            }

            document.body.appendChild(feedback);
            // Thi·∫øt l·∫≠p v·ªã tr√≠ (v√≠ d·ª•: ·ªü g√≥c tr√™n b√™n ph·∫£i)
            feedback.style.top = `${scoreElement.offsetTop}px`;
            feedback.style.left = `${scoreElement.offsetLeft + scoreElement.offsetWidth / 2}px`;
            
            // X√≥a sau khi ho√†n th√†nh animation
            setTimeout(() => {
                feedback.remove();
            }, 1500);
        }

        let totalWeight = 0;
        let totalValue = 0;
        
        // ===============================================
        // KHAI B√ÅO BI·∫æN CHO TIMER V√Ä LOGIC POLLING M·ªöI
        // ===============================================
        let timerInterval;
        const timerDisplay = document.getElementById('game-timer');
        const timerContainer = document.getElementById('timer-container');
        
        let currentTakenId = null;
        // H√†m ƒë·ªãnh d·∫°ng th·ªùi gian (MM:SS)
        function formatTime(totalSeconds) {
            if (totalSeconds < 0) return "00:00";
            const minutes = Math.floor(totalSeconds / 60);
            const seconds = totalSeconds % 60;
            return `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
        }
        
        // H√†m x·ª≠ l√Ω khi h·∫øt th·ªùi gian (ho·∫∑c Server th√¥ng b√°o h·∫øt gi·ªù)
        function challengeFailedByTime() {
            gameActive = false;
            // D·ª´ng b·ªô ƒë·∫øm
            if (timerInterval) clearInterval(timerInterval);
            // V√¥ hi·ªáu h√≥a input v√† drag/drop
            dpBoardBody.querySelectorAll('.dp-input').forEach(input => input.disabled = true);
            
            // ·∫®n khu v·ª±c Knapsack
            knapsackSection.classList.add('hidden');
            itemsSection.classList.add('hidden');
            
            // C·∫≠p nh·∫≠t giao di·ªán
            timerDisplay.textContent = formatTime(0);
            timerContainer.classList.remove('bg-red-100', 'animate-pulse', 'bg-green-100', 'text-green-800');
            timerContainer.classList.add('bg-gray-600', 'text-white');
            
            alert(`‚åõ TH·ª¨ TH√ÅCH TH·∫§T B·∫†I! ƒê√£ h·∫øt th·ªùi gian quy ƒë·ªãnh theo Server. Vui l√≤ng th·ª≠ l·∫°i!`);
        }

        // =======================================================
        // LOGIC B·ªò ƒê·∫æM TH·ªúI GIAN (POLLING SERVER LOGIC)
        // =======================================================

        // H√†m b·∫Øt ƒë·∫ßu ƒë·∫øm ng∆∞·ª£c D·ª∞A TR√äN POLLING SERVER
        function startServerPollingTimer(takenId) {
            currentTakenId = takenId; // L∆∞u Taken ID
            console.log(currentTakenId);
            if (timerInterval) {
                clearInterval(timerInterval);
            }
            
            // H√†m g·ªçi API ƒë·ªÉ l·∫•y th·ªùi gian c√≤n l·∫°i
            async function fetchTimeRemaining() {
                // Ki·ªÉm tra takenId tr∆∞·ªõc khi g·ªçi API
                if (!currentTakenId) {
                    console.error("L·ªói: Kh√¥ng c√≥ Taken ID ƒë·ªÉ g·ªçi Status API.");
                    clearInterval(timerInterval);
                    return;
                }

                try {
                    const response = await fetch(`/api/Game/Status/${currentTakenId}`, {
                        method: 'GET',
                        headers: {
                            'Accept': 'application/json'
                        }
                    });
                    if (!response.ok) {
                        // N·∫øu server tr·∫£ v·ªÅ l·ªói 404 (Kh√¥ng t√¨m th·∫•y session) ho·∫∑c 500
                        throw new Error(`Server status check failed: ${response.status}`);
                    }
                    
                    const result = await response.json();
                    let timeRemainingSeconds = result.timeRemaining;
                    let isTimeUp = result.isTimeUp; // L·∫•y tr·∫°ng th√°i h·∫øt gi·ªù t·ª´ Server
                    console.log("Th·ªùi gian",timeRemainingSeconds)   
                    if (isTimeUp) {
                        clearInterval(timerInterval);
                        timerDisplay.textContent = formatTime(0);
                        challengeFailedByTime();
                        return;
                    }

                    // C·∫≠p nh·∫≠t hi·ªÉn th·ªã b·∫±ng gi√° tr·ªã t·ª´ Server
                    timerDisplay.textContent = formatTime(timeRemainingSeconds);
                    // C·∫≠p nh·∫≠t giao di·ªán c·∫£nh b√°o
                    if (timeRemainingSeconds <= 60 && timeRemainingSeconds > 0) {
                        timerContainer.classList.remove('bg-green-100', 'text-green-800', 'bg-gray-200');
                        timerContainer.classList.add('bg-red-100', 'animate-pulse', 'text-red-800');
                    } else if (timeRemainingSeconds > 60) {
                        timerContainer.classList.remove('bg-gray-200', 'text-red-800', 'bg-red-100', 'animate-pulse');
                        timerContainer.classList.add('bg-green-100', 'text-green-800');
                    } else {
                        // Tr∆∞·ªùng h·ª£p hi·ªÉn th·ªã ban ƒë·∫ßu (maxDuration)
                        timerContainer.classList.remove('bg-green-100', 'text-green-800', 'bg-red-100', 'animate-pulse');
                        timerContainer.classList.add('bg-gray-200', 'text-red-800');
                    }

                } catch (error) {
                    console.error("L·ªói khi polling Server Status:", error);
                    // D·ª´ng polling v√† th√¥ng b√°o l·ªói nghi√™m tr·ªçng
                    if (timerInterval) clearInterval(timerInterval);
                    timerDisplay.textContent = "L·ªói Server";
                    timerContainer.classList.add('bg-gray-500', 'text-white');
                    gameActive = false;
                }
            }
            
            // Th·ª±c hi·ªán l·∫ßn ƒë·∫ßu ngay l·∫≠p t·ª©c
            fetchTimeRemaining();
            // Thi·∫øt l·∫≠p polling m·ªói gi√¢y (1000ms)
            timerInterval = setInterval(fetchTimeRemaining, 1000);
        }

        async function startGameLogic() {
            try {
                // G·ª≠i y√™u c·∫ßu POST ƒë·∫øn API Controller
                const response = await fetch(`/api/Game/Start`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        ChallengeId: challengeId,
                        UserId: '@Model.userId', 
                        PlayerCount: 1 
                    })
                });
                const result = await response.json();

                if (response.ok && result.success) {
                    gameActive = true;
                    startScreen.style.display = 'none';
                    takenId = result.takenId;
                    // B·∫ÆT ƒê·∫¶U ƒê·∫æM NG∆Ø·ª¢C D·ª∞A TR√äN POLLING SERVER (Taken ID)
                    startServerPollingTimer(result.takenId);
                    
                } else {
                    // Hi·ªÉn th·ªã l·ªói t·ª´ Server
                    const errorMessage = result.message || `L·ªói kh√¥ng x√°c ƒë·ªãnh: ${response.status} - ${JSON.stringify(result)}`;
                    startGameBtn.disabled = false;
                    startGameBtn.textContent = 'üî• B·∫ÆT ƒê·∫¶U TR√í CH∆†I';
                    countdownModal.classList.add('hidden'); // ·∫®n countdown n·∫øu c√≥ l·ªói
                }

            } catch (error) {
                startGameBtn.disabled = false;
                startGameBtn.textContent = 'üî• B·∫ÆT ƒê·∫¶U TR√í CH∆†I';
                countdownModal.classList.add('hidden'); // ·∫®n countdown n·∫øu c√≥ l·ªói
            }
        }

        // H√†m x·ª≠ l√Ω ƒë·∫øm ng∆∞·ª£c 3, 2, 1
        function startCountdown() {
            countdownModal.classList.remove('hidden');
            startScreen.classList.add('hidden');
            let count = 3;
            
            // B·∫Øt ƒë·∫ßu v·ªõi 3
            countdownDisplay.textContent = count;
            
            const interval = setInterval(() => {
                count--;
                
                // Lo·∫°i b·ªè v√† th√™m l·∫°i class animate-pulse ƒë·ªÉ ƒë·∫£m b·∫£o animation ch·∫°y l·∫°i tr√™n m·ªôt s·ªë tr√¨nh duy·ªát
                countdownDisplay.classList.remove('animate-pulse');
                void countdownDisplay.offsetWidth; // Bu·ªôc tr√¨nh duy·ªát reflow
                countdownDisplay.classList.add('animate-pulse');
                
                if (count > 0) {
                    countdownDisplay.textContent = count;
                } else if (count === 0) {
                    countdownDisplay.textContent = 'B·∫Øt ƒë·∫ßu!';
                } else {
                    // ƒê·∫øm ng∆∞·ª£c k·∫øt th√∫c
                    clearInterval(interval);
                    countdownModal.classList.add('hidden');
                    // G·ªåI LOGIC B·∫ÆT ƒê·∫¶U GAME TH·∫¨T
                    startGameLogic(); 
                }
            }, 1000);
        }

        // Logic ƒë·ªÉ g·ªçi API b·∫Øt ƒë·∫ßu game (ƒê√£ thay b·∫±ng startCountdown)
        if (startGameBtn && startScreen) {
            startGameBtn.addEventListener('click', () => {
                // T·∫Øt n√∫t ƒë·ªÉ tr√°nh click k√©p v√† cung c·∫•p ph·∫£n h·ªìi
                startGameBtn.disabled = true; 
                startGameBtn.textContent = 'ƒêang chu·∫©n b·ªã...';
                
                // B·∫Øt ƒë·∫ßu ƒë·∫øm ng∆∞·ª£c
                startCountdown();
            });
        }

        function checkAllCellsCompletedAndEndGame() {
            // 1. ƒê·∫øm t·∫•t c·∫£ c√°c √¥ input ch∆∞a ƒë∆∞·ª£c ho√†n th√†nh
            const remainingInputCells = document.querySelectorAll('.dp-cell[data-is-input="true"][data-is-completed="false"]').length;
            
            if (remainingInputCells === 0) {
                // T·∫•t c·∫£ c√°c √¥ ƒë√£ ho√†n th√†nh (qua nh·∫≠p tay ho·∫∑c ti·∫øt l·ªô)
                console.log("T·∫•t c·∫£ √¥ input DP ƒë√£ ƒë∆∞·ª£c ho√†n th√†nh. Ti·∫øn h√†nh k·∫øt th√∫c game DP.");
                // 2. G·ªåI H√ÄM K·∫æT TH√öC GAME DP
                endGame(true, 'DPBoardCompleted');
            }
        }

        function findAndRevealMissedCell() {
            // ... (Logic ti·∫øt l·ªô √¥ gi·ªØ nguy√™n) ...
            
            // 1. T√¨m √¥ input ch∆∞a ho√†n th√†nh ƒë·∫ßu ti√™n ƒë·ªÉ x√°c ƒë·ªãnh gi√° tr·ªã m·ª•c ti√™u
            const uncompletedInputCells = document.querySelectorAll('.dp-cell[data-is-input="true"][data-is-completed="false"]');
            if (uncompletedInputCells.length === 0) {
                checkAllCellsCompletedAndEndGame();
                return { count: 0, value: null };
            }

            const cellToTarget = uncompletedInputCells[0];
            const correctValue = cellToTarget.getAttribute('data-correct-value');
            
            // 2. T√¨m T·∫§T C·∫¢ c√°c √¥ (Input & Non-Input) ch∆∞a ho√†n th√†nh c√≥ gi√° tr·ªã t∆∞∆°ng ƒë·ªìng
            const selector = `.dp-cell[data-is-completed="false"][data-correct-value="${correctValue}"]`;
            const cellsToReveal = document.querySelectorAll(selector);
            let revealedCount = 0;
            
            console.log(`Ti·∫øt l·ªô: ${cellsToReveal.length} √¥ c√≥ gi√° tr·ªã ${correctValue}`);
            // 3. C·∫≠p nh·∫≠t UI cho t·ª´ng √¥ ƒë√£ ch·ªçn
            cellsToReveal.forEach(cell => {
                // *** KI·ªÇM TRA LO·∫†I √î ***
                const isInputCell = cell.getAttribute('data-is-input') === 'true'; 
                
                const 
                cellCorrectValue = cell.getAttribute('data-correct-value');
                const cellContent = cell.querySelector('.cell-content');
                
                // X√≥a input element (ch·ªâ √°p d·ª•ng cho c√°c √¥ input)
                const inputElement = cell.querySelector('.dp-input'); 
                if 
                (inputElement) {
                    inputElement.remove(); 
                }

                if (cellContent) cellContent.innerHTML = '';
                
                // T·∫°o v√† ch√®n span ch·ª©a gi√° tr·ªã
                const newSpan = document.createElement('span');
                newSpan.className = 'dp-value font-semibold';

                // *** ƒêI·ªÄU CH·ªàNH M√ÄU CH·ªÆ THEO LO·∫†I √î ***
                if (isInputCell) {
                    newSpan.classList.add('text-green-700');
                } else {
                    newSpan.classList.add('text-blue-700');
                }

                newSpan.textContent = cellCorrectValue;
                cell.appendChild(newSpan);
                // ƒê√°nh d·∫•u √¥ ƒë√£ ho√†n th√†nh
                cell.setAttribute('data-is-completed', 'true');
                cell.classList.remove('bg-yellow-50'); 

                // *** ƒêI·ªÄU CH·ªàNH M√ÄU N·ªÄN THEO LO·∫†I √î ***
                if (isInputCell) {
                    // √Åp d·ª•ng l·ªõp ti·∫øt l·ªô (n·ªÅn xanh) ch·ªâ cho √¥ input
                    cell.classList.add('bg-green-50');
                } else {
                    // √î non-input gi·ªØ nguy√™n m√†u n·ªÅn (lo·∫°i b·ªè c√°c l·ªõp c≈© ƒë·ªÉ ƒë·∫£m b·∫£o m√†u n·ªÅn tr·∫Øng/m·∫∑c ƒë·ªãnh)
                    cell.classList.add('bg-blue-50');
                }

                revealedCount++;
            });
            // 4. Ki·ªÉm tra EndGame ngay sau khi ti·∫øt l·ªô
            checkAllCellsCompletedAndEndGame();
            return { count: revealedCount, value: correctValue };
        }

        if (revealButton) {
            revealButton.addEventListener('click', async () => {
                const currentScore = parseInt(scoreElement.textContent) || 0;

                // 1. Ki·ªÉm tra ƒëi·ªÉm
                if (currentScore < REVEAL_COST) {
                    alert(`‚ö†Ô∏è Kh√¥ng ƒë·ªß ƒëi·ªÉm! B·∫°n c·∫ßn ${REVEAL_COST} ƒëi·ªÉm ƒë·ªÉ m·ªü kh√≥a, nh∆∞ng ch·ªâ c√≥ ${currentScore} ƒëi·ªÉm.`);
                    return;
                }
                
                // 2. Ki·ªÉm 
                // tra √¥ c√≤n l·∫°i
                const uncompletedCells = document.querySelectorAll('.dp-cell[data-is-input="true"][data-is-completed="false"]');
                if (uncompletedCells.length === 0) {
                    alert("üéâ T·∫•t c·∫£ c√°c √¥ c·∫ßn ƒëi·ªÅn ƒë√£ ƒë∆∞·ª£c ho√†n th√†nh ho·∫∑c ti·∫øt l·ªô. Kh√¥ng c·∫ßn s·ª≠ d·ª•ng t√≠nh nƒÉng n√†y n·ªØa.");
                    return;
                }

                // 3. Khung x√°c nh·∫≠n
                const confirmed = confirm(`B·∫°n c√≥ ch·∫Øc mu·ªën chi ${REVEAL_COST} ƒëi·ªÉm ƒë·ªÉ ti·∫øt l·ªô m·ªôt √¥ DP?`);
                if (!confirmed) {
                    return;
                }

                // 4. G·ªçi API tr·ª´ ƒëi·ªÉm v√† ti·∫øt l·ªô √¥
                try {
                    adjustScoreOnServer(-REVEAL_COST);
                    findAndRevealMissedCell(); 
                } catch (error) {
                    console.error("L·ªói k·∫øt n·ªëi API ti·∫øt l·ªô √¥:", error);
                }
            });
        }


        // --- Drag & Drop Knapsack Logic ---
        
        // H√ÄM KI·ªÇM TRA ƒê·∫†T T·ªêI ∆ØU
        function checkOptimalValueAndEndGame() {
            // T·ª± ƒë·ªông k·∫øt th√∫c n·∫øu t·ªïng gi√° tr·ªã ƒë·∫°t gi√° tr·ªã t·ªëi ∆∞u
            if (totalValue === OPTIMAL_VALUE) {
                endGameKnapsack(totalWeight, totalValue, true);
                return true;
            }
            return false;
        }

        function updateTotals() {
            document.getElementById('total-weight').textContent = totalWeight;
            document.getElementById('total-value').textContent = totalValue;

            const totalWeightSpan = document.getElementById('total-weight');
            if (totalWeight > maxCapacity) {
                totalWeightSpan.classList.add('text-red-500');
                knapsack.classList.add('bg-red-50', 'border-red-500');
                knapsack.classList.remove('bg-white', 'border-gray-400');
            } else {
                totalWeightSpan.classList.remove('text-red-500');
                knapsack.classList.remove('bg-red-50', 'border-red-500');
                knapsack.classList.add('bg-white', 'border-gray-400');
            }
            
            checkOptimalValueAndEndGame(); // KI·ªÇM TRA T·ªêI ∆ØU SAU M·ªñI L·∫¶N C·∫¨P NH·∫¨T
        }

        function setupDragItems() {
            itemsContainer.querySelectorAll('.drag-item').forEach(item => {
                if (item.dataset.hasEvents) return;
                item.dataset.hasEvents = true;

                item.addEventListener('dragstart', (e) => {
                    // KH√îNG C·∫¶N KI·ªÇM TRA knapsackEnabled N·ªÆA
                    if (!item.getAttribute('draggable') || item.getAttribute('draggable') === 'false' || !gameActive) { 
                        e.preventDefault();
                        return;
                    }
                    e.dataTransfer.setData('text/plain', JSON.stringify({
                        id: item.dataset.id,
                        name: item.dataset.name, 
                        value: parseInt(item.dataset.value),
                        weight: parseInt(item.dataset.weight),
                    }));
                    item.style.opacity = '0.5';
                    item.classList.add('dragging');
                });

                item.addEventListener('dragend', (e) => { 
                    item.style.opacity = '1';
                    item.classList.remove('dragging');
                });
            });
        }
        
        setupDragItems();
        knapsack.addEventListener('dragover', (e) => {
            e.preventDefault();
            if (!gameActive) return; // KH√îNG C·∫¶N KI·ªÇM TRA knapsackEnabled
            knapsack.classList.add('border-blue-500', 'bg-blue-50', 'border-dashed');
        });
        knapsack.addEventListener('dragleave', (e) => {
            knapsack.classList.remove('border-blue-500', 'bg-blue-50', 'border-dashed');
        });
        
        function handleDropKnapsack(e) {
            e.preventDefault();
            if (!gameActive) return; // KH√îNG C·∫¶N KI·ªÇM TRA knapsackEnabled
            knapsack.classList.remove('border-blue-500', 'bg-blue-50', 'border-dashed');

            const data = JSON.parse(e.dataTransfer.getData('text/plain'));
            const draggedItem = itemsContainer.querySelector(`.drag-item[data-id="${data.id}"]`);
            if (draggedItem && draggedItem.parentNode === itemsContainer) {
                
                // KI·ªÇM TRA S·ª®C CH·ª®A
                if (totalWeight + data.weight > maxCapacity) {
                    alert(`‚ö†Ô∏è Kh√¥ng th·ªÉ th√™m ${data.weight} kg. T√∫i ch·ªâ c√≤n tr·ªëng ${maxCapacity - totalWeight} kg.`);
                    return; 
                }
                
                // N·∫øu ƒë√£ ƒë·∫°t t·ªëi ∆∞u v√† c·ªë g·∫Øng th√™m v·∫≠t ph·∫©m (c√≥ th·ªÉ v∆∞·ª£t qu√° maxCapacity), kh√¥ng cho ph√©p
                 if (totalValue === OPTIMAL_VALUE && (totalWeight + data.weight > maxCapacity || data.value > 0)) {
                    // N·∫øu ƒë√£ ƒë·∫°t t·ªëi ∆∞u, ch·ªâ cho ph√©p k√©o th·∫£ n·∫øu v·∫≠t ph·∫©m m·ªõi c√≥ W=0, V=0.
                    // Nh∆∞ng ƒë·ªÉ ƒë∆°n gi·∫£n, ta ch·ªâ c·∫ßn ki·ªÉm tra sau khi th√™m. N·∫øu v∆∞·ª£t qu√° th√¨ revert.
                 }

                const clone = draggedItem.cloneNode(true);
                clone.setAttribute('draggable', 'false');
                clone.classList.remove('hover:ring-2', 'hover:ring-blue-300', 'cursor-grab');
                clone.classList.add('knapsack-item', 'relative', 'bg-blue-100', 'shadow-md', 'ring-2', 'ring-blue-400');
                
                knapsack.appendChild(clone);

                totalWeight += data.weight;
                totalValue += data.value;
                updateTotals();

                knapsack.querySelector('.placeholder-content')?.remove();
                draggedItem.remove(); // X√ìA V·∫¨T PH·∫®M KH·ªéI KHUNG CH·ªåN

                const removeBtn = document.createElement('button');
                removeBtn.innerHTML = '<span class="material-symbols-outlined text-sm">close</span>';
                removeBtn.className = 'absolute top-0 right-0 p-1 text-red-600 hover:text-red-800 bg-white rounded-full leading-none shadow-md';
                removeBtn.onclick = (event) => {
                    event.stopPropagation();
                    removeFromKnapsack(clone, data); 
                };
                clone.appendChild(removeBtn);
            }
        }

        knapsack.addEventListener('drop', handleDropKnapsack);
        // G·∫Øn event listener

        function removeFromKnapsack(knapsackItemElement, itemData) { 
            knapsackItemElement.remove();

            // T·∫†O L·∫†I V·∫¨T PH·∫®M TRONG KHUNG CH·ªåN
            const recreatedItem = document.createElement('div');
            recreatedItem.className = 'drag-item bg-white p-3 rounded-lg shadow border border-gray-200 hover:ring-2 hover:ring-blue-300 transition duration-150 cursor-grab';
            recreatedItem.setAttribute('draggable', 'true');
            recreatedItem.setAttribute('data-id', itemData.id);
            recreatedItem.setAttribute('data-value', itemData.value);
            recreatedItem.setAttribute('data-weight', itemData.weight);
            recreatedItem.setAttribute('data-name', itemData.name); 
            recreatedItem.innerHTML = `
                <p class="text-sm font-bold text-gray-900">${itemData.name}</p> 
                <div class="flex justify-between text-xs mt-1">
                    <p class="text-green-600">V: <strong>${itemData.value}</strong></p>
                    <p class="text-red-600">W: <strong>${itemData.weight}</strong> kg</p>
                </div>`;
            itemsContainer.appendChild(recreatedItem);
            setupDragItems(); // Thi·∫øt l·∫≠p l·∫°i event listener cho v·∫≠t ph·∫©m m·ªõi

            totalWeight -= itemData.weight;
            totalValue -= itemData.value;
            updateTotals();
            
            if (knapsack.children.length === 0) {
                const placeholder = document.createElement('div');
                placeholder.className = 'w-full text-center text-gray-500 p-8 placeholder-content';
                placeholder.innerHTML = `
                    <svg class="mx-auto w-10 h-10 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 13.255A23.518 23.518 0 0112 15c-3.15 0-6.11-.826-8.75-2.255L3 18v2h18v-7.745zM12 3a9 9 0 00-9 9h18a9 9 0 00-9-9z"></path></svg>
                    <p class="mt-2">K√©o v·∫≠t ph·∫©m v√†o ƒë√¢y</p>`;
                knapsack.appendChild(placeholder);
            }
        }


        // 3. Logic Ho√†n Th√†nh Tr√≤ Ch∆°i Knapsack T·ª∞ ƒê·ªòNG
        function endGameKnapsack(finalWeight, finalValue, isOptimal) {
            gameActive = false;
            if (timerInterval) clearInterval(timerInterval);
            
            console.log(`K·∫øt qu·∫£ Knapsack: W=${finalWeight}, V=${finalValue}`);
            
            knapsack.removeEventListener('drop', handleDropKnapsack); 
            
            if (isOptimal) {
                showFinalResults();
                startConfetti();
                alert(`üèÜ CH√öC M·ª™NG! B·∫°n ƒë√£ ƒë·∫°t ƒë∆∞·ª£c Gi√° Tr·ªã T·ªëi ∆Øu ${finalValue} (Tr·ªçng l∆∞·ª£ng: ${finalWeight} / ${maxCapacity}). TR√í CH∆†I K·∫æT TH√öC!`);
            } else {
                alert(`Game Over. T·ªïng Gi√° Tr·ªã: ${finalValue}.`);
            }
        }
        
        // 4. Logic Ho√†n Th√†nh Tr√≤ Ch∆°i DP (EndGame M·ªõi)
        function endGame(isSuccess = false, reason = 'TimeUp') { 
            
            // 1. Ti·∫øt l·ªô to√†n b·ªô b·∫£ng DP (bao g·ªìm c·∫£ √¥ mask)
            dpBoardBody.querySelectorAll('.dp-cell').forEach(cell => {
                 const isBoundary = parseInt(cell.dataset.i) === 0 || parseInt(cell.dataset.w) === 0;
                 const isCompleted = cell.dataset.isCompleted === 'true';
                 
                 // Ch·ªâ ti·∫øt l·ªô c√°c √¥ ch∆∞a ƒë∆∞·ª£c ho√†n th√†nh (mask ho·∫∑c input b·ªã b·ªè s√≥t)
                 if (!isBoundary && !isCompleted) {
                     const correctValue = cell.dataset.correctValue;
                     
                     cell.innerHTML = '';
                     cell.classList.add('bg-gray-200'); 
                   
                     const finalSpan = document.createElement('span');
                     finalSpan.className = 'dp-value text-gray-800 font-bold';
                     finalSpan.textContent = correctValue;
          
                     cell.appendChild(finalSpan);
                     cell.dataset.isCompleted = 'true';
                 }
            });
            
            // *** ƒêI·ªÇM CH√çNH: K√çCH HO·∫†T V√Ä HI·ªÇN TH·ªä KHU V·ª∞C KNAPSACK ***
            if (isSuccess && reason === 'DPBoardCompleted') {
                // Hi·ªÉn th·ªã 2 khu v·ª±c Knapsack/Items
                knapsackSection.classList.remove('hidden'); 
                itemsSection.classList.remove('hidden');
            } else if (reason === 'TimeUp') {
                // ƒê√£ x·ª≠ l√Ω trong challengeFailedByTime.
            }
        }
        
        // ... (Logic input DP gi·ªØ nguy√™n) ...
        dpBoardBody.querySelectorAll('.dp-input').forEach(input => {
            input.addEventListener('change', (e) => {
                if (!gameActive) {
                    alert("Vui l√≤ng nh·∫•n n√∫t 'B·∫ÆT ƒê·∫¶U TR√í CH∆†I' tr∆∞·ªõc!");
                    e.target.value = ''; // X√≥a gi√° tr·ªã ƒë√£ nh·∫≠p
                    return;
                }
            
            
                const inputElement = e.target;
                const cellElement = inputElement.closest('.dp-cell');
                const correctValue = parseInt(cellElement.dataset.correctValue);
                const enteredValue = parseInt(inputElement.value);
                const isCompleted = cellElement.dataset.isCompleted 
                    === 'true';

                if (isCompleted) return; 

                if (enteredValue === correctValue) {
                    // --- Gi√° tr·ªã ƒê√öNG ---
                    const correctSpan = document.createElement('span');
                    correctSpan.className = 'dp-value text-green-700 font-semibold';
                    correctSpan.textContent = correctValue;
                    
                    cellElement.innerHTML = ''; 
                    cellElement.appendChild(correctSpan);
                    cellElement.classList.add('bg-green-50'); 
                    cellElement.dataset.isCompleted = 'true'; 
                    remainingInputCells--; 
                    adjustScoreOnServer(SCORE_CORRECT);
                    // Ti·∫øt l·ªô c√°c √¥ *KH√îNG PH·∫¢I INPUT* c√≥ c√πng gi√° tr·ªã
                    dpBoardBody.querySelectorAll('.dp-cell').forEach(otherCell => {
                        const otherCorrectValue = parseInt(otherCell.dataset.correctValue);
                        const isOtherInput = otherCell.dataset.isInput === 'true'; 
                        const isOtherCompleted = otherCell.dataset.isCompleted === 'true';
                        
                        if (otherCorrectValue === correctValue && !isOtherInput && !isOtherCompleted && otherCell.querySelector('.dp-hidden-mask')) {
                            
                            const revealedSpan = document.createElement('span');
                            revealedSpan.className = 'dp-value text-blue-700 font-semibold';
                            revealedSpan.textContent = otherCorrectValue;
  
                            
                            otherCell.innerHTML = '';
                            otherCell.appendChild(revealedSpan);
                            otherCell.classList.add('bg-blue-50');
                            otherCell.dataset.isCompleted = 'true';
                        }
                    });
                    // Ki·ªÉm tra ho√†n th√†nh tr√≤ ch∆°i DP
                    if (remainingInputCells <= 0) { 
                        setTimeout(() => endGame(true, 'DPBoardCompleted'), 500); 
                    }

                } else {
                    // --- Gi√° tr·ªã SAI ---
                    
                    inputElement.classList.add('border-red-500', 'ring-2', 'ring-red-500');
                    inputElement.style.backgroundColor = '#fef2f2';
                    
                    inputElement.classList.add('animate-shake');
                    adjustScoreOnServer(SCORE_INCORRECT);
                    
                    setTimeout(() => {
                        inputElement.classList.remove('border-red-500', 'ring-2', 'ring-red-500', 'animate-shake');
                        inputElement.style.backgroundColor = '#fffbeb';
                        inputElement.value = '';
                    }, 500);
                }
            });
        });


        // Logic khi trang ƒë∆∞·ª£c t·∫£i l·∫°i trong tr·∫°ng th√°i game ƒë√£ b·∫Øt ƒë·∫ßu (N·∫øu Model.GameStarted=true)
        if (@(Model.GameStarted.ToString().ToLower())) {
            if (startScreen) {
                 startScreen.style.display = 'none';
            }
        }
        
        // Logic cho Hint/Recurrence Relation
        const hintButton = document.getElementById('hint-button');
        const hintContent = document.getElementById('hint-content');
        const hintIcon = document.getElementById('hint-icon');
        
        if (hintContent && hintButton) {
            hintContent.style.maxHeight = '0px';
            hintButton.addEventListener('click', () => {
                if (hintContent.style.maxHeight === '0px') {
                    hintContent.style.maxHeight = "500px"; 
                    hintIcon.textContent = '‚ñº';
                } else {
                    hintContent.style.maxHeight = '0px';
                    hintIcon.textContent = '‚ñ∂';
                }
            });
        }

        // H√ÄM HI·ªÇN TH·ªä K·∫æT QU·∫¢ CU·ªêI C√ôNG
        async function showFinalResults() {
            console.log("currentTakenId",currentTakenId)
            if (!currentTakenId) {
                console.error("L·ªói: Kh√¥ng t√¨m th·∫•y Taken ID ƒë·ªÉ hi·ªÉn th·ªã k·∫øt qu·∫£ cu·ªëi c√πng.");
                return;
            }

            try {
                // G·ªçi API l·∫ßn cu·ªëi ƒë·ªÉ l·∫•y tr·∫°ng th√°i game, bao g·ªìm ƒëi·ªÉm v√† th·ªùi gian c√≤n l·∫°i
                // Gi·∫£ ƒë·ªãnh API /api/Game/Status/{takenId} tr·∫£ v·ªÅ timeRemaining v√† currentScore
                const response = await fetch(`/api/Game/Status/${currentTakenId}`, {
                    method: 'GET',
                    headers: { 'Accept': 'application/json' }
                });

                if (!response.ok) {
                    throw new Error(`Server status check failed: ${response.status}`);
                }
                
                const result = await response.json();
                
                const finalTimeRemaining = result.timeRemaining || 0;
                const finalScore = result.currentScore || parseInt(scoreElement.textContent) || 0;

                // T√≠nh to√°n th·ªùi gian ƒë√£ s·ª≠ d·ª•ng
                let timeUsedSeconds = MAX_DURATION_SECONDS - finalTimeRemaining;
                if (timeUsedSeconds < 0) timeUsedSeconds = MAX_DURATION_SECONDS; // ƒê·∫£m b·∫£o kh√¥ng √¢m
                // C·∫≠p nh·∫≠t ƒëi·ªÉm hi·ªÉn th·ªã l·∫ßn cu·ªëi
                scoreElement.textContent = finalScore;
                optimalValueDisplay.textContent = OPTIMAL_VALUE;
                finalScoreDisplay.textContent = `${finalScore} ƒëi·ªÉm`;
                timeUsedDisplay.textContent = formatTime(timeUsedSeconds);

                finalResultsModal.classList.remove('hidden');

            } catch (error) {
                console.error("L·ªói khi l·∫•y k·∫øt qu·∫£ cu·ªëi c√πng:", error);
            }
        }

        function startConfetti() {
            var end = Date.now() + (8 * 1000);
            var colors = ['#bb0000', '#ffffff'];
            (function frame() {
                confetti({ particleCount: 2, angle: 60, spread: 55, origin: { x: 0 }, colors: colors });
                confetti({ particleCount: 2, angle: 120, spread: 55, origin: { x: 1 }, colors: colors });
                if (Date.now() < end) requestAnimationFrame(frame);
            })();
        }
    </script>
    }
</body>